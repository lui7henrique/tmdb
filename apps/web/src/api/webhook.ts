/**
 * Generated by orval v7.2.0 🍺
 * Do not edit manually.
 * Plotwist
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation
} from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query'
import { axiosInstance } from '../services/axios-instance';




/**
 * Webhook route
 */
export const postWebhook = (
    
 ) => {
      
      
      return axiosInstance<void>(
      {url: `/webhook`, method: 'POST'
    },
      );
    }
  


export const getPostWebhookMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postWebhook>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postWebhook>>, TError,void, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postWebhook>>, void> = () => {
          

          return  postWebhook()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostWebhookMutationResult = NonNullable<Awaited<ReturnType<typeof postWebhook>>>
    
    export type PostWebhookMutationError = unknown

    export const usePostWebhook = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postWebhook>>, TError,void, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postWebhook>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getPostWebhookMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
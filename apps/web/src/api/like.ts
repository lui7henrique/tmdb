/**
 * Generated by orval v7.2.0 🍺
 * Do not edit manually.
 * Plotwist
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation
} from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query'
import type {
  PostLike201,
  PostLikeBody
} from './endpoints.schemas'
import { axiosInstance } from '../services/axios-instance';




/**
 * Create like
 */
export const postLike = (
    postLikeBody: PostLikeBody,
 ) => {
      
      
      return axiosInstance<PostLike201>(
      {url: `/like`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postLikeBody
    },
      );
    }
  


export const getPostLikeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLike>>, TError,{data: PostLikeBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postLike>>, TError,{data: PostLikeBody}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postLike>>, {data: PostLikeBody}> = (props) => {
          const {data} = props ?? {};

          return  postLike(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostLikeMutationResult = NonNullable<Awaited<ReturnType<typeof postLike>>>
    export type PostLikeMutationBody = PostLikeBody
    export type PostLikeMutationError = unknown

    export const usePostLike = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLike>>, TError,{data: PostLikeBody}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postLike>>,
        TError,
        {data: PostLikeBody},
        TContext
      > => {

      const mutationOptions = getPostLikeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Delete like
 */
export const deleteLikeId = (
    id: string,
 ) => {
      
      
      return axiosInstance<void>(
      {url: `/like/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteLikeIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteLikeId>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteLikeId>>, TError,{id: string}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteLikeId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteLikeId(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteLikeIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteLikeId>>>
    
    export type DeleteLikeIdMutationError = unknown

    export const useDeleteLikeId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteLikeId>>, TError,{id: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deleteLikeId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteLikeIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
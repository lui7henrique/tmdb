/**
 * Generated by orval v7.2.0 üç∫
 * Do not edit manually.
 * Event booster
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import axios from 'axios'
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios'
import type {
  GetCheckEmail200,
  GetCheckEmail409,
  GetCheckEmailParams,
  GetCheckUsername200,
  GetCheckUsername409,
  GetCheckUsernameParams,
  PostRegisterUser200,
  PostRegisterUser409,
  PostRegisterUser500,
  PostRegisterUserBody,
} from './endpoints.schemas'

/**
 * Register a user
 */
export const postRegisterUser = (
  postRegisterUserBody: PostRegisterUserBody,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<PostRegisterUser200>> => {
  return axios.post(`/register-user`, postRegisterUserBody, options)
}

export const getPostRegisterUserMutationOptions = <
  TError = AxiosError<PostRegisterUser409 | PostRegisterUser500>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postRegisterUser>>,
    TError,
    { data: PostRegisterUserBody },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof postRegisterUser>>,
  TError,
  { data: PostRegisterUserBody },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postRegisterUser>>,
    { data: PostRegisterUserBody }
  > = (props) => {
    const { data } = props ?? {}

    return postRegisterUser(data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostRegisterUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof postRegisterUser>>
>
export type PostRegisterUserMutationBody = PostRegisterUserBody
export type PostRegisterUserMutationError = AxiosError<
  PostRegisterUser409 | PostRegisterUser500
>

export const usePostRegisterUser = <
  TError = AxiosError<PostRegisterUser409 | PostRegisterUser500>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postRegisterUser>>,
    TError,
    { data: PostRegisterUserBody },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof postRegisterUser>>,
  TError,
  { data: PostRegisterUserBody },
  TContext
> => {
  const mutationOptions = getPostRegisterUserMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Check username
 */
export const getCheckUsername = (
  params: GetCheckUsernameParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetCheckUsername200>> => {
  return axios.get(`/check-username`, {
    ...options,
    params: { ...params, ...options?.params },
  })
}

export const getGetCheckUsernameQueryKey = (params: GetCheckUsernameParams) => {
  return [`/check-username`, ...(params ? [params] : [])] as const
}

export const getGetCheckUsernameQueryOptions = <
  TData = Awaited<ReturnType<typeof getCheckUsername>>,
  TError = AxiosError<GetCheckUsername409>,
>(
  params: GetCheckUsernameParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCheckUsername>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetCheckUsernameQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCheckUsername>>
  > = ({ signal }) => getCheckUsername(params, { signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCheckUsername>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetCheckUsernameQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCheckUsername>>
>
export type GetCheckUsernameQueryError = AxiosError<GetCheckUsername409>

export function useGetCheckUsername<
  TData = Awaited<ReturnType<typeof getCheckUsername>>,
  TError = AxiosError<GetCheckUsername409>,
>(
  params: GetCheckUsernameParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCheckUsername>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCheckUsername>>,
          TError,
          TData
        >,
        'initialData'
      >
    axios?: AxiosRequestConfig
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetCheckUsername<
  TData = Awaited<ReturnType<typeof getCheckUsername>>,
  TError = AxiosError<GetCheckUsername409>,
>(
  params: GetCheckUsernameParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCheckUsername>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCheckUsername>>,
          TError,
          TData
        >,
        'initialData'
      >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetCheckUsername<
  TData = Awaited<ReturnType<typeof getCheckUsername>>,
  TError = AxiosError<GetCheckUsername409>,
>(
  params: GetCheckUsernameParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCheckUsername>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetCheckUsername<
  TData = Awaited<ReturnType<typeof getCheckUsername>>,
  TError = AxiosError<GetCheckUsername409>,
>(
  params: GetCheckUsernameParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCheckUsername>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetCheckUsernameQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Check email
 */
export const getCheckEmail = (
  params: GetCheckEmailParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetCheckEmail200>> => {
  return axios.get(`/check-email`, {
    ...options,
    params: { ...params, ...options?.params },
  })
}

export const getGetCheckEmailQueryKey = (params: GetCheckEmailParams) => {
  return [`/check-email`, ...(params ? [params] : [])] as const
}

export const getGetCheckEmailQueryOptions = <
  TData = Awaited<ReturnType<typeof getCheckEmail>>,
  TError = AxiosError<GetCheckEmail409>,
>(
  params: GetCheckEmailParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCheckEmail>>, TError, TData>
    >
    axios?: AxiosRequestConfig
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetCheckEmailQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCheckEmail>>> = ({
    signal,
  }) => getCheckEmail(params, { signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCheckEmail>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetCheckEmailQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCheckEmail>>
>
export type GetCheckEmailQueryError = AxiosError<GetCheckEmail409>

export function useGetCheckEmail<
  TData = Awaited<ReturnType<typeof getCheckEmail>>,
  TError = AxiosError<GetCheckEmail409>,
>(
  params: GetCheckEmailParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCheckEmail>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCheckEmail>>,
          TError,
          TData
        >,
        'initialData'
      >
    axios?: AxiosRequestConfig
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetCheckEmail<
  TData = Awaited<ReturnType<typeof getCheckEmail>>,
  TError = AxiosError<GetCheckEmail409>,
>(
  params: GetCheckEmailParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCheckEmail>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCheckEmail>>,
          TError,
          TData
        >,
        'initialData'
      >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetCheckEmail<
  TData = Awaited<ReturnType<typeof getCheckEmail>>,
  TError = AxiosError<GetCheckEmail409>,
>(
  params: GetCheckEmailParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCheckEmail>>, TError, TData>
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetCheckEmail<
  TData = Awaited<ReturnType<typeof getCheckEmail>>,
  TError = AxiosError<GetCheckEmail409>,
>(
  params: GetCheckEmailParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCheckEmail>>, TError, TData>
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetCheckEmailQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

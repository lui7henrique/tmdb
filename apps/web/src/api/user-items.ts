/**
 * Generated by orval v7.2.0 🍺
 * Do not edit manually.
 * Plotwist
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery, useSuspenseQuery } from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from '@tanstack/react-query'
import { axiosInstance } from '../services/axios-instance'
import type {
  GetUserItem200,
  GetUserItemParams,
  GetUserItems200Item,
  GetUserItemsParams,
  PutUserItem201,
  PutUserItemBody,
} from './endpoints.schemas'

/**
 * Upsert user item
 */
export const putUserItem = (putUserItemBody: PutUserItemBody) => {
  return axiosInstance<PutUserItem201>({
    url: `/user/item`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: putUserItemBody,
  })
}

export const getPutUserItemMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putUserItem>>,
    TError,
    { data: PutUserItemBody },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof putUserItem>>,
  TError,
  { data: PutUserItemBody },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putUserItem>>,
    { data: PutUserItemBody }
  > = props => {
    const { data } = props ?? {}

    return putUserItem(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PutUserItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof putUserItem>>
>
export type PutUserItemMutationBody = PutUserItemBody
export type PutUserItemMutationError = unknown

export const usePutUserItem = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putUserItem>>,
    TError,
    { data: PutUserItemBody },
    TContext
  >
}): UseMutationResult<
  Awaited<ReturnType<typeof putUserItem>>,
  TError,
  { data: PutUserItemBody },
  TContext
> => {
  const mutationOptions = getPutUserItemMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Get user item
 */
export const getUserItem = (
  params: GetUserItemParams,
  signal?: AbortSignal
) => {
  return axiosInstance<GetUserItem200>({
    url: `/user/item`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetUserItemQueryKey = (params: GetUserItemParams) => {
  return [`/user/item`, ...(params ? [params] : [])] as const
}

export const getGetUserItemQueryOptions = <
  TData = Awaited<ReturnType<typeof getUserItem>>,
  TError = unknown,
>(
  params: GetUserItemParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUserItem>>, TError, TData>
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetUserItemQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserItem>>> = ({
    signal,
  }) => getUserItem(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getUserItem>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetUserItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserItem>>
>
export type GetUserItemQueryError = unknown

export function useGetUserItem<
  TData = Awaited<ReturnType<typeof getUserItem>>,
  TError = unknown,
>(
  params: GetUserItemParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUserItem>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserItem>>,
          TError,
          TData
        >,
        'initialData'
      >
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetUserItem<
  TData = Awaited<ReturnType<typeof getUserItem>>,
  TError = unknown,
>(
  params: GetUserItemParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUserItem>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserItem>>,
          TError,
          TData
        >,
        'initialData'
      >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetUserItem<
  TData = Awaited<ReturnType<typeof getUserItem>>,
  TError = unknown,
>(
  params: GetUserItemParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUserItem>>, TError, TData>
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetUserItem<
  TData = Awaited<ReturnType<typeof getUserItem>>,
  TError = unknown,
>(
  params: GetUserItemParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUserItem>>, TError, TData>
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetUserItemQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getGetUserItemSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getUserItem>>,
  TError = unknown,
>(
  params: GetUserItemParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getUserItem>>,
        TError,
        TData
      >
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetUserItemQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserItem>>> = ({
    signal,
  }) => getUserItem(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getUserItem>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetUserItemSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserItem>>
>
export type GetUserItemSuspenseQueryError = unknown

export function useGetUserItemSuspense<
  TData = Awaited<ReturnType<typeof getUserItem>>,
  TError = unknown,
>(
  params: GetUserItemParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getUserItem>>,
        TError,
        TData
      >
    >
  }
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetUserItemSuspense<
  TData = Awaited<ReturnType<typeof getUserItem>>,
  TError = unknown,
>(
  params: GetUserItemParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getUserItem>>,
        TError,
        TData
      >
    >
  }
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetUserItemSuspense<
  TData = Awaited<ReturnType<typeof getUserItem>>,
  TError = unknown,
>(
  params: GetUserItemParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getUserItem>>,
        TError,
        TData
      >
    >
  }
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetUserItemSuspense<
  TData = Awaited<ReturnType<typeof getUserItem>>,
  TError = unknown,
>(
  params: GetUserItemParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getUserItem>>,
        TError,
        TData
      >
    >
  }
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetUserItemSuspenseQueryOptions(params, options)

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Get user items
 */
export const getUserItems = (
  params: GetUserItemsParams,
  signal?: AbortSignal
) => {
  return axiosInstance<GetUserItems200Item[]>({
    url: `/user/items`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetUserItemsQueryKey = (params: GetUserItemsParams) => {
  return [`/user/items`, ...(params ? [params] : [])] as const
}

export const getGetUserItemsQueryOptions = <
  TData = Awaited<ReturnType<typeof getUserItems>>,
  TError = unknown,
>(
  params: GetUserItemsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUserItems>>, TError, TData>
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetUserItemsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserItems>>> = ({
    signal,
  }) => getUserItems(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getUserItems>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetUserItemsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserItems>>
>
export type GetUserItemsQueryError = unknown

export function useGetUserItems<
  TData = Awaited<ReturnType<typeof getUserItems>>,
  TError = unknown,
>(
  params: GetUserItemsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUserItems>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserItems>>,
          TError,
          TData
        >,
        'initialData'
      >
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetUserItems<
  TData = Awaited<ReturnType<typeof getUserItems>>,
  TError = unknown,
>(
  params: GetUserItemsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUserItems>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserItems>>,
          TError,
          TData
        >,
        'initialData'
      >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetUserItems<
  TData = Awaited<ReturnType<typeof getUserItems>>,
  TError = unknown,
>(
  params: GetUserItemsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUserItems>>, TError, TData>
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetUserItems<
  TData = Awaited<ReturnType<typeof getUserItems>>,
  TError = unknown,
>(
  params: GetUserItemsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUserItems>>, TError, TData>
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetUserItemsQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getGetUserItemsSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getUserItems>>,
  TError = unknown,
>(
  params: GetUserItemsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getUserItems>>,
        TError,
        TData
      >
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetUserItemsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserItems>>> = ({
    signal,
  }) => getUserItems(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getUserItems>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetUserItemsSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserItems>>
>
export type GetUserItemsSuspenseQueryError = unknown

export function useGetUserItemsSuspense<
  TData = Awaited<ReturnType<typeof getUserItems>>,
  TError = unknown,
>(
  params: GetUserItemsParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getUserItems>>,
        TError,
        TData
      >
    >
  }
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetUserItemsSuspense<
  TData = Awaited<ReturnType<typeof getUserItems>>,
  TError = unknown,
>(
  params: GetUserItemsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getUserItems>>,
        TError,
        TData
      >
    >
  }
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetUserItemsSuspense<
  TData = Awaited<ReturnType<typeof getUserItems>>,
  TError = unknown,
>(
  params: GetUserItemsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getUserItems>>,
        TError,
        TData
      >
    >
  }
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetUserItemsSuspense<
  TData = Awaited<ReturnType<typeof getUserItems>>,
  TError = unknown,
>(
  params: GetUserItemsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getUserItems>>,
        TError,
        TData
      >
    >
  }
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetUserItemsSuspenseQueryOptions(params, options)

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Delete user item
 */
export const deleteUserItemId = (id: string) => {
  return axiosInstance<void>({ url: `/user/item/${id}`, method: 'DELETE' })
}

export const getDeleteUserItemIdMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteUserItemId>>,
    TError,
    { id: string },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteUserItemId>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteUserItemId>>,
    { id: string }
  > = props => {
    const { id } = props ?? {}

    return deleteUserItemId(id)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteUserItemIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteUserItemId>>
>

export type DeleteUserItemIdMutationError = unknown

export const useDeleteUserItemId = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteUserItemId>>,
    TError,
    { id: string },
    TContext
  >
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteUserItemId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteUserItemIdMutationOptions(options)

  return useMutation(mutationOptions)
}

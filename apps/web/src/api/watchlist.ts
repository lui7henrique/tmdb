/**
 * Generated by orval v7.2.0 🍺
 * Do not edit manually.
 * Plotwist
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query'
import type {
  GetWatchlistItems200Item,
  GetWatchlistItemsParams,
  PostWatchlistItemBody
} from './endpoints.schemas'
import { axiosInstance } from '../services/axios-instance';




/**
 * Create watchlist item
 */
export const postWatchlistItem = (
    postWatchlistItemBody: PostWatchlistItemBody,
 ) => {
      
      
      return axiosInstance<void>(
      {url: `/watchlist/item`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postWatchlistItemBody
    },
      );
    }
  


export const getPostWatchlistItemMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postWatchlistItem>>, TError,{data: PostWatchlistItemBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postWatchlistItem>>, TError,{data: PostWatchlistItemBody}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postWatchlistItem>>, {data: PostWatchlistItemBody}> = (props) => {
          const {data} = props ?? {};

          return  postWatchlistItem(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostWatchlistItemMutationResult = NonNullable<Awaited<ReturnType<typeof postWatchlistItem>>>
    export type PostWatchlistItemMutationBody = PostWatchlistItemBody
    export type PostWatchlistItemMutationError = unknown

    export const usePostWatchlistItem = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postWatchlistItem>>, TError,{data: PostWatchlistItemBody}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postWatchlistItem>>,
        TError,
        {data: PostWatchlistItemBody},
        TContext
      > => {

      const mutationOptions = getPostWatchlistItemMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Get watchlist items
 */
export const getWatchlistItems = (
    params: GetWatchlistItemsParams,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<GetWatchlistItems200Item[]>(
      {url: `/watchlist/items`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetWatchlistItemsQueryKey = (params: GetWatchlistItemsParams,) => {
    return [`/watchlist/items`, ...(params ? [params]: [])] as const;
    }

    
export const getGetWatchlistItemsQueryOptions = <TData = Awaited<ReturnType<typeof getWatchlistItems>>, TError = unknown>(params: GetWatchlistItemsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWatchlistItems>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWatchlistItemsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWatchlistItems>>> = ({ signal }) => getWatchlistItems(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getWatchlistItems>>, TError, TData> & { queryKey: QueryKey }
}

export type GetWatchlistItemsQueryResult = NonNullable<Awaited<ReturnType<typeof getWatchlistItems>>>
export type GetWatchlistItemsQueryError = unknown


export function useGetWatchlistItems<TData = Awaited<ReturnType<typeof getWatchlistItems>>, TError = unknown>(
 params: GetWatchlistItemsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWatchlistItems>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWatchlistItems>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetWatchlistItems<TData = Awaited<ReturnType<typeof getWatchlistItems>>, TError = unknown>(
 params: GetWatchlistItemsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWatchlistItems>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWatchlistItems>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetWatchlistItems<TData = Awaited<ReturnType<typeof getWatchlistItems>>, TError = unknown>(
 params: GetWatchlistItemsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWatchlistItems>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetWatchlistItems<TData = Awaited<ReturnType<typeof getWatchlistItems>>, TError = unknown>(
 params: GetWatchlistItemsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWatchlistItems>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetWatchlistItemsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetWatchlistItemsSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getWatchlistItems>>, TError = unknown>(params: GetWatchlistItemsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getWatchlistItems>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWatchlistItemsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWatchlistItems>>> = ({ signal }) => getWatchlistItems(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getWatchlistItems>>, TError, TData> & { queryKey: QueryKey }
}

export type GetWatchlistItemsSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getWatchlistItems>>>
export type GetWatchlistItemsSuspenseQueryError = unknown


export function useGetWatchlistItemsSuspense<TData = Awaited<ReturnType<typeof getWatchlistItems>>, TError = unknown>(
 params: GetWatchlistItemsParams, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getWatchlistItems>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetWatchlistItemsSuspense<TData = Awaited<ReturnType<typeof getWatchlistItems>>, TError = unknown>(
 params: GetWatchlistItemsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getWatchlistItems>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetWatchlistItemsSuspense<TData = Awaited<ReturnType<typeof getWatchlistItems>>, TError = unknown>(
 params: GetWatchlistItemsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getWatchlistItems>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetWatchlistItemsSuspense<TData = Awaited<ReturnType<typeof getWatchlistItems>>, TError = unknown>(
 params: GetWatchlistItemsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getWatchlistItems>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetWatchlistItemsSuspenseQueryOptions(params,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




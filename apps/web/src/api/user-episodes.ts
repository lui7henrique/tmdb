/**
 * Generated by orval v7.2.0 🍺
 * Do not edit manually.
 * Plotwist
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery, useSuspenseQuery } from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from '@tanstack/react-query'
import type {
  DeleteUserEpisodesId204,
  GetUserEpisodes200Item,
  GetUserEpisodesParams,
  PostUserEpisodes201,
  PostUserEpisodes409,
  PostUserEpisodesBody,
} from './endpoints.schemas'
import { axiosInstance } from '../services/axios-instance'

/**
 * Create user episode
 */
export const postUserEpisodes = (
  postUserEpisodesBody: PostUserEpisodesBody,
) => {
  return axiosInstance<PostUserEpisodes201>({
    url: `/user/episodes`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: postUserEpisodesBody,
  })
}

export const getPostUserEpisodesMutationOptions = <
  TError = PostUserEpisodes409,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postUserEpisodes>>,
    TError,
    { data: PostUserEpisodesBody },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postUserEpisodes>>,
  TError,
  { data: PostUserEpisodesBody },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postUserEpisodes>>,
    { data: PostUserEpisodesBody }
  > = (props) => {
    const { data } = props ?? {}

    return postUserEpisodes(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostUserEpisodesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postUserEpisodes>>
>
export type PostUserEpisodesMutationBody = PostUserEpisodesBody
export type PostUserEpisodesMutationError = PostUserEpisodes409

export const usePostUserEpisodes = <
  TError = PostUserEpisodes409,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postUserEpisodes>>,
    TError,
    { data: PostUserEpisodesBody },
    TContext
  >
}): UseMutationResult<
  Awaited<ReturnType<typeof postUserEpisodes>>,
  TError,
  { data: PostUserEpisodesBody },
  TContext
> => {
  const mutationOptions = getPostUserEpisodesMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Get user episode
 */
export const getUserEpisodes = (
  params: GetUserEpisodesParams,
  signal?: AbortSignal,
) => {
  return axiosInstance<GetUserEpisodes200Item[]>({
    url: `/user/episodes`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetUserEpisodesQueryKey = (params: GetUserEpisodesParams) => {
  return [`/user/episodes`, ...(params ? [params] : [])] as const
}

export const getGetUserEpisodesQueryOptions = <
  TData = Awaited<ReturnType<typeof getUserEpisodes>>,
  TError = unknown,
>(
  params: GetUserEpisodesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserEpisodes>>,
        TError,
        TData
      >
    >
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetUserEpisodesQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserEpisodes>>> = ({
    signal,
  }) => getUserEpisodes(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getUserEpisodes>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetUserEpisodesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserEpisodes>>
>
export type GetUserEpisodesQueryError = unknown

export function useGetUserEpisodes<
  TData = Awaited<ReturnType<typeof getUserEpisodes>>,
  TError = unknown,
>(
  params: GetUserEpisodesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserEpisodes>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserEpisodes>>,
          TError,
          TData
        >,
        'initialData'
      >
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetUserEpisodes<
  TData = Awaited<ReturnType<typeof getUserEpisodes>>,
  TError = unknown,
>(
  params: GetUserEpisodesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserEpisodes>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserEpisodes>>,
          TError,
          TData
        >,
        'initialData'
      >
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetUserEpisodes<
  TData = Awaited<ReturnType<typeof getUserEpisodes>>,
  TError = unknown,
>(
  params: GetUserEpisodesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserEpisodes>>,
        TError,
        TData
      >
    >
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetUserEpisodes<
  TData = Awaited<ReturnType<typeof getUserEpisodes>>,
  TError = unknown,
>(
  params: GetUserEpisodesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserEpisodes>>,
        TError,
        TData
      >
    >
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetUserEpisodesQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getGetUserEpisodesSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getUserEpisodes>>,
  TError = unknown,
>(
  params: GetUserEpisodesParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getUserEpisodes>>,
        TError,
        TData
      >
    >
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetUserEpisodesQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserEpisodes>>> = ({
    signal,
  }) => getUserEpisodes(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getUserEpisodes>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetUserEpisodesSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserEpisodes>>
>
export type GetUserEpisodesSuspenseQueryError = unknown

export function useGetUserEpisodesSuspense<
  TData = Awaited<ReturnType<typeof getUserEpisodes>>,
  TError = unknown,
>(
  params: GetUserEpisodesParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getUserEpisodes>>,
        TError,
        TData
      >
    >
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetUserEpisodesSuspense<
  TData = Awaited<ReturnType<typeof getUserEpisodes>>,
  TError = unknown,
>(
  params: GetUserEpisodesParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getUserEpisodes>>,
        TError,
        TData
      >
    >
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetUserEpisodesSuspense<
  TData = Awaited<ReturnType<typeof getUserEpisodes>>,
  TError = unknown,
>(
  params: GetUserEpisodesParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getUserEpisodes>>,
        TError,
        TData
      >
    >
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetUserEpisodesSuspense<
  TData = Awaited<ReturnType<typeof getUserEpisodes>>,
  TError = unknown,
>(
  params: GetUserEpisodesParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getUserEpisodes>>,
        TError,
        TData
      >
    >
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetUserEpisodesSuspenseQueryOptions(params, options)

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Delete user episode
 */
export const deleteUserEpisodesId = (id: string) => {
  return axiosInstance<DeleteUserEpisodesId204>({
    url: `/user/episodes/${id}`,
    method: 'DELETE',
  })
}

export const getDeleteUserEpisodesIdMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteUserEpisodesId>>,
    TError,
    { id: string },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteUserEpisodesId>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteUserEpisodesId>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {}

    return deleteUserEpisodesId(id)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteUserEpisodesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteUserEpisodesId>>
>

export type DeleteUserEpisodesIdMutationError = unknown

export const useDeleteUserEpisodesId = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteUserEpisodesId>>,
    TError,
    { id: string },
    TContext
  >
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteUserEpisodesId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteUserEpisodesIdMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * Generated by orval v7.2.0 🍺
 * Do not edit manually.
 * Event booster
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetLists200,
  GetListsParams,
  PostCreateList201,
  PostCreateListBody
} from './endpoints.schemas'
import { axiosInstance } from '../services/axios-instance';




/**
 * Create a list
 */
export const postCreateList = (
    postCreateListBody: PostCreateListBody,
 ) => {
      
      
      return axiosInstance<PostCreateList201>(
      {url: `/create-list`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postCreateListBody
    },
      );
    }
  


export const getPostCreateListMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCreateList>>, TError,{data: PostCreateListBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postCreateList>>, TError,{data: PostCreateListBody}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postCreateList>>, {data: PostCreateListBody}> = (props) => {
          const {data} = props ?? {};

          return  postCreateList(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostCreateListMutationResult = NonNullable<Awaited<ReturnType<typeof postCreateList>>>
    export type PostCreateListMutationBody = PostCreateListBody
    export type PostCreateListMutationError = unknown

    export const usePostCreateList = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCreateList>>, TError,{data: PostCreateListBody}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postCreateList>>,
        TError,
        {data: PostCreateListBody},
        TContext
      > => {

      const mutationOptions = getPostCreateListMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Get lists
 */
export const getLists = (
    params?: GetListsParams,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<GetLists200>(
      {url: `/lists`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetListsQueryKey = (params?: GetListsParams,) => {
    return [`/lists`, ...(params ? [params]: [])] as const;
    }

    
export const getGetListsQueryOptions = <TData = Awaited<ReturnType<typeof getLists>>, TError = unknown>(params?: GetListsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLists>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetListsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLists>>> = ({ signal }) => getLists(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLists>>, TError, TData> & { queryKey: QueryKey }
}

export type GetListsQueryResult = NonNullable<Awaited<ReturnType<typeof getLists>>>
export type GetListsQueryError = unknown


export function useGetLists<TData = Awaited<ReturnType<typeof getLists>>, TError = unknown>(
 params: undefined |  GetListsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLists>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLists>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetLists<TData = Awaited<ReturnType<typeof getLists>>, TError = unknown>(
 params?: GetListsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLists>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLists>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetLists<TData = Awaited<ReturnType<typeof getLists>>, TError = unknown>(
 params?: GetListsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLists>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetLists<TData = Awaited<ReturnType<typeof getLists>>, TError = unknown>(
 params?: GetListsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLists>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetListsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




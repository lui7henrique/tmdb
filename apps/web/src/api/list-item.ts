/**
 * Generated by orval v7.2.0 🍺
 * Do not edit manually.
 * Plotwist
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery, useSuspenseQuery } from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from '@tanstack/react-query'
import type {
  DeleteListItemId200,
  GetListItemsByListId200,
  PostListItem201,
  PostListItemBody,
} from './endpoints.schemas'
import { axiosInstance } from '../services/axios-instance'

/**
 * Create list item
 */
export const postListItem = (postListItemBody: PostListItemBody) => {
  return axiosInstance<PostListItem201>({
    url: `/list-item`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: postListItemBody,
  })
}

export const getPostListItemMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postListItem>>,
    TError,
    { data: PostListItemBody },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postListItem>>,
  TError,
  { data: PostListItemBody },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postListItem>>,
    { data: PostListItemBody }
  > = (props) => {
    const { data } = props ?? {}

    return postListItem(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostListItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof postListItem>>
>
export type PostListItemMutationBody = PostListItemBody
export type PostListItemMutationError = unknown

export const usePostListItem = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postListItem>>,
    TError,
    { data: PostListItemBody },
    TContext
  >
}): UseMutationResult<
  Awaited<ReturnType<typeof postListItem>>,
  TError,
  { data: PostListItemBody },
  TContext
> => {
  const mutationOptions = getPostListItemMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Create list item
 */
export const getListItemsByListId = (listId: string, signal?: AbortSignal) => {
  return axiosInstance<GetListItemsByListId200>({
    url: `/list-items/by/${listId}`,
    method: 'GET',
    signal,
  })
}

export const getGetListItemsByListIdQueryKey = (listId: string) => {
  return [`/list-items/by/${listId}`] as const
}

export const getGetListItemsByListIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getListItemsByListId>>,
  TError = unknown,
>(
  listId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getListItemsByListId>>,
        TError,
        TData
      >
    >
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetListItemsByListIdQueryKey(listId)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getListItemsByListId>>
  > = ({ signal }) => getListItemsByListId(listId, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!listId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getListItemsByListId>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetListItemsByListIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getListItemsByListId>>
>
export type GetListItemsByListIdQueryError = unknown

export function useGetListItemsByListId<
  TData = Awaited<ReturnType<typeof getListItemsByListId>>,
  TError = unknown,
>(
  listId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getListItemsByListId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getListItemsByListId>>,
          TError,
          TData
        >,
        'initialData'
      >
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetListItemsByListId<
  TData = Awaited<ReturnType<typeof getListItemsByListId>>,
  TError = unknown,
>(
  listId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getListItemsByListId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getListItemsByListId>>,
          TError,
          TData
        >,
        'initialData'
      >
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetListItemsByListId<
  TData = Awaited<ReturnType<typeof getListItemsByListId>>,
  TError = unknown,
>(
  listId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getListItemsByListId>>,
        TError,
        TData
      >
    >
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetListItemsByListId<
  TData = Awaited<ReturnType<typeof getListItemsByListId>>,
  TError = unknown,
>(
  listId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getListItemsByListId>>,
        TError,
        TData
      >
    >
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetListItemsByListIdQueryOptions(listId, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getGetListItemsByListIdSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getListItemsByListId>>,
  TError = unknown,
>(
  listId: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getListItemsByListId>>,
        TError,
        TData
      >
    >
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetListItemsByListIdQueryKey(listId)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getListItemsByListId>>
  > = ({ signal }) => getListItemsByListId(listId, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!listId,
    ...queryOptions,
  } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getListItemsByListId>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetListItemsByListIdSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getListItemsByListId>>
>
export type GetListItemsByListIdSuspenseQueryError = unknown

export function useGetListItemsByListIdSuspense<
  TData = Awaited<ReturnType<typeof getListItemsByListId>>,
  TError = unknown,
>(
  listId: string,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getListItemsByListId>>,
        TError,
        TData
      >
    >
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetListItemsByListIdSuspense<
  TData = Awaited<ReturnType<typeof getListItemsByListId>>,
  TError = unknown,
>(
  listId: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getListItemsByListId>>,
        TError,
        TData
      >
    >
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetListItemsByListIdSuspense<
  TData = Awaited<ReturnType<typeof getListItemsByListId>>,
  TError = unknown,
>(
  listId: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getListItemsByListId>>,
        TError,
        TData
      >
    >
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetListItemsByListIdSuspense<
  TData = Awaited<ReturnType<typeof getListItemsByListId>>,
  TError = unknown,
>(
  listId: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getListItemsByListId>>,
        TError,
        TData
      >
    >
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetListItemsByListIdSuspenseQueryOptions(
    listId,
    options,
  )

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Delete list item
 */
export const deleteListItemId = (id: string) => {
  return axiosInstance<DeleteListItemId200>({
    url: `/list-item/${id}`,
    method: 'DELETE',
  })
}

export const getDeleteListItemIdMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteListItemId>>,
    TError,
    { id: string },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteListItemId>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteListItemId>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {}

    return deleteListItemId(id)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteListItemIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteListItemId>>
>

export type DeleteListItemIdMutationError = unknown

export const useDeleteListItemId = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteListItemId>>,
    TError,
    { id: string },
    TContext
  >
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteListItemId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteListItemIdMutationOptions(options)

  return useMutation(mutationOptions)
}

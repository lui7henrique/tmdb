/**
 * Generated by orval v7.2.0 🍺
 * Do not edit manually.
 * Plotwist
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery, useSuspenseQuery } from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from '@tanstack/react-query'
import type {
  GetSocialLinksByUserId200,
  PutSocialLinksBody,
} from './endpoints.schemas'
import { axiosInstance } from '../services/axios-instance'

/**
 * Update social links
 */
export const putSocialLinks = (putSocialLinksBody: PutSocialLinksBody) => {
  return axiosInstance<unknown>({
    url: `/social-links`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: putSocialLinksBody,
  })
}

export const getPutSocialLinksMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putSocialLinks>>,
    TError,
    { data: PutSocialLinksBody },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof putSocialLinks>>,
  TError,
  { data: PutSocialLinksBody },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putSocialLinks>>,
    { data: PutSocialLinksBody }
  > = (props) => {
    const { data } = props ?? {}

    return putSocialLinks(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PutSocialLinksMutationResult = NonNullable<
  Awaited<ReturnType<typeof putSocialLinks>>
>
export type PutSocialLinksMutationBody = PutSocialLinksBody
export type PutSocialLinksMutationError = unknown

export const usePutSocialLinks = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putSocialLinks>>,
    TError,
    { data: PutSocialLinksBody },
    TContext
  >
}): UseMutationResult<
  Awaited<ReturnType<typeof putSocialLinks>>,
  TError,
  { data: PutSocialLinksBody },
  TContext
> => {
  const mutationOptions = getPutSocialLinksMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Get social links by userId
 */
export const getSocialLinksByUserId = (
  userId: string,
  signal?: AbortSignal,
) => {
  return axiosInstance<GetSocialLinksByUserId200>({
    url: `/social-links/by/${userId}`,
    method: 'GET',
    signal,
  })
}

export const getGetSocialLinksByUserIdQueryKey = (userId: string) => {
  return [`/social-links/by/${userId}`] as const
}

export const getGetSocialLinksByUserIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getSocialLinksByUserId>>,
  TError = unknown,
>(
  userId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSocialLinksByUserId>>,
        TError,
        TData
      >
    >
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetSocialLinksByUserIdQueryKey(userId)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getSocialLinksByUserId>>
  > = ({ signal }) => getSocialLinksByUserId(userId, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!userId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getSocialLinksByUserId>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetSocialLinksByUserIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSocialLinksByUserId>>
>
export type GetSocialLinksByUserIdQueryError = unknown

export function useGetSocialLinksByUserId<
  TData = Awaited<ReturnType<typeof getSocialLinksByUserId>>,
  TError = unknown,
>(
  userId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSocialLinksByUserId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSocialLinksByUserId>>,
          TError,
          TData
        >,
        'initialData'
      >
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetSocialLinksByUserId<
  TData = Awaited<ReturnType<typeof getSocialLinksByUserId>>,
  TError = unknown,
>(
  userId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSocialLinksByUserId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSocialLinksByUserId>>,
          TError,
          TData
        >,
        'initialData'
      >
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetSocialLinksByUserId<
  TData = Awaited<ReturnType<typeof getSocialLinksByUserId>>,
  TError = unknown,
>(
  userId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSocialLinksByUserId>>,
        TError,
        TData
      >
    >
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetSocialLinksByUserId<
  TData = Awaited<ReturnType<typeof getSocialLinksByUserId>>,
  TError = unknown,
>(
  userId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSocialLinksByUserId>>,
        TError,
        TData
      >
    >
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetSocialLinksByUserIdQueryOptions(userId, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getGetSocialLinksByUserIdSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getSocialLinksByUserId>>,
  TError = unknown,
>(
  userId: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getSocialLinksByUserId>>,
        TError,
        TData
      >
    >
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetSocialLinksByUserIdQueryKey(userId)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getSocialLinksByUserId>>
  > = ({ signal }) => getSocialLinksByUserId(userId, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!userId,
    ...queryOptions,
  } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getSocialLinksByUserId>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetSocialLinksByUserIdSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSocialLinksByUserId>>
>
export type GetSocialLinksByUserIdSuspenseQueryError = unknown

export function useGetSocialLinksByUserIdSuspense<
  TData = Awaited<ReturnType<typeof getSocialLinksByUserId>>,
  TError = unknown,
>(
  userId: string,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getSocialLinksByUserId>>,
        TError,
        TData
      >
    >
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetSocialLinksByUserIdSuspense<
  TData = Awaited<ReturnType<typeof getSocialLinksByUserId>>,
  TError = unknown,
>(
  userId: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getSocialLinksByUserId>>,
        TError,
        TData
      >
    >
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetSocialLinksByUserIdSuspense<
  TData = Awaited<ReturnType<typeof getSocialLinksByUserId>>,
  TError = unknown,
>(
  userId: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getSocialLinksByUserId>>,
        TError,
        TData
      >
    >
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetSocialLinksByUserIdSuspense<
  TData = Awaited<ReturnType<typeof getSocialLinksByUserId>>,
  TError = unknown,
>(
  userId: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getSocialLinksByUserId>>,
        TError,
        TData
      >
    >
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetSocialLinksByUserIdSuspenseQueryOptions(
    userId,
    options,
  )

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

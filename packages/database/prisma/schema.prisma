generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model followers {
  id                                       BigInt    @id @default(autoincrement())
  created_at                               DateTime  @default(now()) @db.Timestamptz(6)
  follower_id                              String?   @default(uuid()) @db.Uuid
  followed_id                              String?   @default(uuid()) @db.Uuid
  profiles_followers_followed_idToprofiles profiles? @relation("followers_followed_idToprofiles", fields: [followed_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  profiles_followers_follower_idToprofiles profiles? @relation("followers_follower_idToprofiles", fields: [follower_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model likes {
  id              String          @id @default(uuid()) @db.Uuid
  entity_type     LIKE_ENTITY
  review_id       String?         @db.Uuid
  review_reply_id String?         @db.Uuid
  user_id         String          @db.Uuid
  reviews         reviews?        @relation(fields: [review_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "public_likes_review_id_fkey")
  review_replies  review_replies? @relation(fields: [review_reply_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "public_likes_review_reply_id_fkey")
  profiles        profiles        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "public_likes_user_id_fkey")
}

model list_items {
  id            String      @default(uuid()) @db.Uuid
  created_at    DateTime    @default(now()) @db.Timestamptz(6)
  list_id       String      @db.Uuid
  title         String?
  overview      String?
  backdrop_path String?
  poster_path   String?
  tmdb_id       BigInt?
  media_type    MEDIA_TYPE?
  order         Int?
  lists         lists       @relation(fields: [list_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "public_list_items_list_id_fkey")

  @@id([id, list_id])
}

model list_likes {
  id         String    @id @default(uuid()) @db.Uuid
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  list_id    String?   @default(uuid()) @db.Uuid
  user_id    String?   @default(uuid()) @db.Uuid
  lists      lists?    @relation(fields: [list_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  profiles   profiles? @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model lists {
  id          String          @id @unique(map: "unique_id") @default(uuid()) @db.Uuid
  created_at  DateTime        @default(now()) @db.Timestamptz(6)
  name        String?         @db.VarChar
  user_id     String          @db.Uuid
  description String?
  cover_path  String?
  visibility  LIST_VISIBILITY
  list_items  list_items[]
  list_likes  list_likes[]
  profiles    profiles        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model profiles {
  id                                                         String             @id(map: "users_pkey") @db.Uuid
  email                                                      String?            @unique @default("")
  username                                                   String?            @unique
  created_at                                                 DateTime?          @default(now()) @db.Timestamptz(6)
  banner_path                                                String?
  subscription_type                                          SUBSCRIPTION_TYPE? @default(MEMBER)
  image_path                                                 String?
  followers_followers_followed_idToprofiles                  followers[]        @relation("followers_followed_idToprofiles")
  followers_followers_follower_idToprofiles                  followers[]        @relation("followers_follower_idToprofiles")
  likes                                                      likes[]
  list_likes                                                 list_likes[]
  lists                                                      lists[]
  recommendations_recommendations_receiver_user_idToprofiles recommendations[]  @relation("recommendations_receiver_user_idToprofiles")
  recommendations_recommendations_sender_user_idToprofiles   recommendations[]  @relation("recommendations_sender_user_idToprofiles")
  review_replies                                             review_replies[]
  reviews                                                    reviews[]
  subscriptions                                              subscriptions[]
  watched_items                                              watched_items[]
}

model recommendations {
  id                                                  String      @id @default(uuid()) @db.Uuid
  created_at                                          DateTime    @default(now()) @db.Timestamptz(6)
  receiver_user_id                                    String?     @default(uuid()) @db.Uuid
  media_type                                          MEDIA_TYPE?
  tmdb_id                                             BigInt?
  sender_user_id                                      String?     @db.Uuid
  message                                             String?
  profiles_recommendations_receiver_user_idToprofiles profiles?   @relation("recommendations_receiver_user_idToprofiles", fields: [receiver_user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  profiles_recommendations_sender_user_idToprofiles   profiles?   @relation("recommendations_sender_user_idToprofiles", fields: [sender_user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model review_replies {
  id         String    @id(map: "review_reply_pkey") @default(uuid()) @db.Uuid
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  user_id    String?   @default(uuid()) @db.Uuid
  reply      String?
  review_id  String?   @default(uuid()) @db.Uuid
  likes      likes[]
  reviews    reviews?  @relation(fields: [review_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "public_review_replies_review_id_fkey")
  profiles   profiles? @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "public_review_replies_user_id_fkey")
}

model reviews {
  id               String           @id @default(uuid()) @db.Uuid
  created_at       DateTime         @default(now()) @db.Timestamptz(6)
  user_id          String?          @default(uuid()) @db.Uuid
  tmdb_id          BigInt?
  media_type       MEDIA_TYPE?
  review           String?
  rating           Int?             @db.SmallInt
  tmdb_title       String?          @db.VarChar
  tmdb_poster_path String?
  tmdb_overview    String?
  language         LANGUAGES?
  likes            likes[]
  review_replies   review_replies[]
  profiles         profiles?        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "public_reviews_user_id_fkey")
}

model subscriptions {
  id         BigInt             @id @default(autoincrement())
  created_at DateTime           @default(now()) @db.Timestamptz(6)
  user_id    String?            @db.Uuid
  type       SUBSCRIPTION_TYPE?
  profiles   profiles?          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "public_subscriptions_user_id_fkey")
}

model watched_items {
  id         BigInt    @id(map: "watched_items_pkey") @default(autoincrement())
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  tmdb_id    BigInt?
  user_id    String?   @db.Uuid
  profiles   profiles? @relation(fields: [user_id], references: [id], onDelete: NoAction, map: "watched_items_user_id_fkey")
}

enum LANGUAGES {
  en_US @map("en-US")
  es_ES @map("es-ES")
  fr_FR @map("fr-FR")
  it_IT @map("it-IT")
  de_DE @map("de-DE")
  pt_BR @map("pt-BR")
  ja_JP @map("ja-JP")
}

enum LIKE_ENTITY {
  REVIEW
  REPLY
}

enum LIST_VISIBILITY {
  PUBLIC
  NETWORK
  PRIVATE
}

enum MEDIA_TYPE {
  TV_SHOW
  MOVIE
}

enum STATUS {
  WATCHING
  PENDING
  WATCHED
}

enum SUBSCRIPTION_TYPE {
  MEMBER
  PRO
}

enum media_type_enum {
  TV_SHOW
  MOVIE
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model followers {
  id                                       BigInt    @id @default(autoincrement())
  created_at                               DateTime  @default(now()) @db.Timestamptz(6)
  follower_id                              String?   @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  followed_id                              String?   @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  profiles_followers_followed_idToprofiles profiles? @relation("followers_followed_idToprofiles", fields: [followed_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  profiles_followers_follower_idToprofiles profiles? @relation("followers_follower_idToprofiles", fields: [follower_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model likes {
  id              String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  entity_type     LIKE_ENTITY
  review_id       String?         @db.Uuid
  review_reply_id String?         @db.Uuid
  user_id         String          @db.Uuid
  reviews         reviews?        @relation(fields: [review_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "public_likes_review_id_fkey")
  review_replies  review_replies? @relation(fields: [review_reply_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "public_likes_review_reply_id_fkey")
  profiles        profiles        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "public_likes_user_id_fkey")
}

model list_items {
  id            String      @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at    DateTime    @default(now()) @db.Timestamptz(6)
  list_id       String      @db.Uuid
  title         String?
  overview      String?
  backdrop_path String?
  poster_path   String?
  tmdb_id       BigInt?
  media_type    MEDIA_TYPE?
  lists         lists       @relation(fields: [list_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "public_listItems_list_id_fkey")

  @@id([id, list_id])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model list_likes {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  list_id    String?   @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String?   @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  lists      lists?    @relation(fields: [list_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  profiles   profiles? @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model lists {
  id          String          @id @unique(map: "unique_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at  DateTime        @default(now()) @db.Timestamptz(6)
  name        String?         @db.VarChar
  user_id     String          @db.Uuid
  description String?
  cover_path  String?
  visibility  LIST_VISIBILITY
  list_items  list_items[]
  list_likes  list_likes[]
  profiles    profiles        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model profiles {
  id                                        String             @id(map: "users_pkey") @db.Uuid
  email                                     String?            @unique @default("")
  username                                  String?            @unique
  created_at                                DateTime?          @default(now()) @db.Timestamptz(6)
  banner_path                               String?
  subscription_type                         SUBSCRIPTION_TYPE? @default(MEMBER)
  image_path                                String?
  followers_followers_followed_idToprofiles followers[]        @relation("followers_followed_idToprofiles")
  followers_followers_follower_idToprofiles followers[]        @relation("followers_follower_idToprofiles")
  likes                                     likes[]
  list_likes                                list_likes[]
  lists                                     lists[]
  review_replies                            review_replies[]
  reviews                                   reviews[]
  subscriptions                             subscriptions[]
}

model review_replies {
  id         String    @id(map: "review_reply_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  user_id    String?   @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  reply      String?
  review_id  String?   @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  likes      likes[]
  reviews    reviews?  @relation(fields: [review_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "public_review_replies_review_id_fkey")
  profiles   profiles? @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "public_review_replies_user_id_fkey")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model reviews {
  id               String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at       DateTime         @default(now()) @db.Timestamptz(6)
  user_id          String?          @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tmdb_id          BigInt?
  media_type       MEDIA_TYPE?
  review           String?
  rating           Int?             @db.SmallInt
  has_spoilers     Boolean?         @default(false)
  tmdb_title       String?          @db.VarChar
  tmdb_poster_path String?
  tmdb_overview    String?
  language         LANGUAGES?
  likes            likes[]
  review_replies   review_replies[]
  profiles         profiles?        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "public_reviews_user_id_fkey")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model subscriptions {
  id         BigInt             @id @default(autoincrement())
  created_at DateTime           @default(now()) @db.Timestamptz(6)
  user_id    String?            @db.Uuid
  type       SUBSCRIPTION_TYPE?
  profiles   profiles?          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "public_subscriptions_user_id_fkey")
}

enum LANGUAGES {
  en_US @map("en-US")
  es_ES @map("es-ES")
  fr_FR @map("fr-FR")
  it_IT @map("it-IT")
  de_DE @map("de-DE")
  pt_BR @map("pt-BR")
  ja_JP @map("ja-JP")
}

enum LIKE_ENTITY {
  REVIEW
  REPLY
}

/// This enum is commented in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
enum LIST_VISIBILITY {
  PUBLIC
  NETWORK
  PRIVATE
}

/// This enum is commented in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
enum MEDIA_TYPE {
  TV_SHOW
  MOVIE
}

enum SUBSCRIPTION_TYPE {
  MEMBER
  PRO
}
